name: ci
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pgmcp_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    env:
      DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/pgmcp_test?sslmode=disable
      LOG_LEVEL: error
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Go tidy
        run: go mod tidy
      - name: Build Server
        run: go build -o pgmcp-server ./server
      - name: Build Client  
        run: go build -o pgmcp-client ./client
      - name: Lint
        run: |
          go vet ./...
          test -z "$(gofmt -s -l . | grep -v vendor/)"
      - name: Security Scan (GoSec)
        uses: securego/gosec@master
        with:
          args: './...'
      - name: Setup Database Schema
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h 127.0.0.1 -p 5432 -U postgres; do sleep 1; done
          # Load minimal schema for end-to-end testing (includes "Categories" table)
          psql $DATABASE_URL < schema_minimal.sql
      - name: All Tests (with database)
        run: go test ./... -v
      - name: Integration & Performance Tests
        run: go test ./server -tags=integration -v
      - name: End-to-End Test (Search Only)
        run: |
          # Start server in background (no OpenAI key needed for search)
          ./pgmcp-server &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test search functionality (doesn't require OpenAI)
          echo "Testing search functionality..."
          ./pgmcp-client -search "Electronics" -format table
          ./pgmcp-client -search "good" -format json
          ./pgmcp-client -search "Books" -format table
          
          # Test server health endpoint
          curl -f http://localhost:8080/healthz || exit 1
          
          # Clean up
          kill $SERVER_PID
          echo "âœ… End-to-end search functionality test completed successfully"
